/**
* getBloomReachTheme.ds
*
* This script is responsible for fetching Thematic content from Bloomreach.  It also fetches and processes the BloomReach content cached on the Demandware instance, 
* retrieving specific portions of the Thematic page for rendering on a customer styled page.
*
*	@input CurrentRequest : dw.system.Request 
*	@input BRThemeName : String
*	@input ReferURL : String
*   @output ThematicResponse : String
*
*/

importPackage( dw.system );
importPackage( dw.io );
importPackage( dw.net );
importPackage( dw.util );
importPackage( dw.web );
importScript ("logBloomReachError.ds");

function execute( args : PipelineDictionary ) : Number
{	
	var httpClient : HTTPClient = new HTTPClient();
	var output : String;
	
	if(	Site.getCurrent().preferences.custom.BR_ClientID == null || 
		Site.getCurrent().preferences.custom.BR_AuthID == null ||
		Site.getCurrent().preferences.custom.BR_Theme_URL == null) {
			logFailure("BloomReach theme settings not defined.");	
			return PIPELET_ERROR; 
	}
	
	var brClient = Site.getCurrent().preferences.custom.BR_ClientID;
	var brAuth = Site.getCurrent().preferences.custom.BR_AuthID;
	var url : String = Site.getCurrent().preferences.custom.BR_Theme_URL + '/' + brClient + '/' + brAuth + '/prod/desktop/v1/' + args.BRThemeName + '.html?user_agent=' + escape(args.CurrentRequest.httpUserAgent) + '&url=' + args.ReferURL;
	
httpClient.open('GET', url);			
	httpClient.send();
	if (httpClient.statusCode == 200)
	{
		args.ThematicResponse = new String(httpClient.text);
	}
	else
	{
		logFailure("BloomReach theme returned status code " + httpClient.statusCode + " for " + url, null);
		return PIPELET_ERROR;
	}

   return PIPELET_NEXT;
}

function getBloomReachTheme(themePart : String, themeName : String, currentRequest : Object) : String {	
	var httpClient : HTTPClient = new HTTPClient();
	
	var referUrl : String = escape(currentRequest.httpProtocol + '://' + currentRequest.httpHost + currentRequest.httpPath + '?' + currentRequest.httpQueryString);
         
	var url = URLUtils.abs('BloomReachTheme-Fetch', 
		'theme', themeName, 'refer', referUrl);
	logFailure(url);
	httpClient.open('GET', url);			
	httpClient.send();
	if (httpClient.statusCode == 200)
	{
		return parseThematicResponse(new String(httpClient.text), themePart);
	}
	else
	{
		logFailure("BloomReach theme part returned status code " + httpClient.statusCode + " for " + url, null);
		return "";
	}	
}

function parseThematicResponse(themeResp : String, themePart : String) : String {
	var objectToParse : String = new String(themeResp);			
	var parseHeaderStart : String = "<!-- BEGIN HTML-HEADER -->";
	var parseHeaderEnd : String = "<!-- END HTML-HEADER -->";
	var headerCommLength = parseHeaderStart.length;

	var parseBodyStart : String = "<!-- BEGIN HTML-BODY -->";
	var parseBodyEnd : String = "<!-- END HTML-BODY -->";
	var bodyCommLength = parseBodyStart.length;

	if(objectToParse.indexOf(parseHeaderStart) != -1 && themePart.toLowerCase() == "header"){
		var relStartPos = objectToParse.indexOf(parseHeaderStart) + headerCommLength;
		var relEndPos = objectToParse.indexOf(parseHeaderEnd);
		var headerString = objectToParse.slice(relStartPos, relEndPos);
		return headerString;
	}
	
	if(objectToParse.indexOf(parseBodyStart) != -1 && themePart.toLowerCase() == "body"){
		var relStartPos = objectToParse.indexOf(parseBodyStart) + bodyCommLength;
		var relEndPos = objectToParse.indexOf(parseBodyEnd);
		var bodyString = objectToParse.slice(relStartPos, relEndPos);
		return bodyString;
	}
}

function getQueryVariable(queryString : String, variable : String) {
    var query = queryString;
    var vars = query.split('&');
    for (var i = 0; i < vars.length; i++) {
        var pair = vars[i].split('=');
        if (decodeURIComponent(pair[0]) == variable) {
            return decodeURIComponent(pair[1]);
        }
    }
}
