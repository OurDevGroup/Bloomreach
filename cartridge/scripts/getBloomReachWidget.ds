/**
* This script returns the widget requested from the
* cached widget text of our fetch pipeline.
* It parses the correct portion, based on the type parameter,
* then returns the requested text.
*/
importPackage( dw.system );
importPackage( dw.web );
importPackage( dw.util );
importPackage( dw.net );

function getBloomReachWidget(type : String, accountID : String, accountKey : String, url : String, userAgent : String, referrer : String, pageType : String, productID : String, productName : String, pageStatus : String) {
	
	var logger : Logger = dw.system.Logger.getLogger('BloomReachWidget', 'BloomReachWidget');;
	
	// verify required arguments
	var isValid : Boolean = validateParameters(type, accountID, accountKey, url, userAgent, referrer, pageType);
	if(!isValid) {
		return '';
	}
	
	// convert null arguments to empty strings
	referrer    = (null == referrer)    ? '' : referrer;
	productID   = (null == productID)   ? '' : productID;
	productName = (null == productName) ? '' : productName;
	pageStatus  = (null == pageStatus)  ? '' : pageStatus;
	
	// build our URL
	var url = URLUtils.abs('BloomReachWidget-Fetch', 
							'accountID', accountID, 
							'accountKey', accountKey, 
							'url', url, 
							'userAgent', userAgent, 
							'referrer', referrer, 
							'pageType', pageType, 
							'productID', productID, 
							'productName', productName, 
							'pageStatus', pageStatus);

						
	// make the call
	var text = fetchWidgetText( url );
	
	// prase the URL
	var patt  = regExForType( type );
	var result = patt.exec( text );
	
	return result[1];
	return (result.length == 2) ? result[1] : "";
}


function validateParameters(type : String, accountID : String, accountKey : String, url : String, userAgent : String, referrer : String, pageType : String){
	var logger : Logger = dw.system.Logger.getLogger('BloomReachWidget', 'BloomReachWidget');
	var isValid : Boolean = true;
	
	if ( empty(type) ) {
		logger.error('type is a required parameter');
		isValid = false;
	}
	if ( empty(accountID) ) {
		logger.error('accountID is a required parameter');
		isValid = false;
	}
	if ( empty(accountKey) ) {
		logger.error('accountKey is a required parameter');
		isValid = false;
	}
	if ( empty(url) ) {
		logger.error('url is a required parameter');
		isValid = false;
	}
	if ( empty(userAgent) ) {
		logger.error('userAgent is a required parameter');
		isValid = false;
	}
	if ( empty(pageType) ) {
		logger.error('pageType is a required parameter');
		isValid = false;
	}
	
	return isValid;
}

function fetchWidgetText(url : String) {

	var httpClient : HTTPClient = new HTTPClient();
	var text : String;
	httpClient.open('GET', url);
	httpClient.send();
 
	if (httpClient.statusCode == 200) {
		text = httpClient.text;
	} else {
		text="";
	}	
	
	return text;
}

function regExForType( type : String ) {
	var patt = /a^/; // match nothing
	
	if( type == 'related' ) {
		patt = /<!-- BEGIN RELATED -->([\s\S]+)<!-- END RELATED -->/;
	}
	if( type == 'moreresults' ) {
		patt = /<!-- BEGIN MORE-RESULTS -->([\s\S]+)<!-- END MORE-RESULTS -->/;
	}
	if( type == 'htmlheader' ) {
		patt = /<!-- BEGIN HTML-HEADER -->([\s\S]+)<!-- END HTML-HEADER -->/;
	}
	
	return patt;
}
