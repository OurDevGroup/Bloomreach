/**
* This script returns the widget requested from the
* cached widget text of our fetch pipeline.
* It parses the correct portion, based on the type parameter,
* then returns the requested text.
*/
importPackage( dw.system );
importPackage( dw.web );
importPackage( dw.util );
importPackage( dw.net );
importScript ("logBloomReachError.ds");

/*
 This function is responisble for calling BloomReach's servers and returning the full HTML for widgets
 This function is expected to be called from the BloomReachWidget-GetWidget pipeline.
*/
function getBloomReachFullWidgetHTML(accountID : String, accountKey : String, url : String, userAgent : String, referrer : String, pageType : String, productID : String, productName : String, pageStatus : String) {
	var logger : Logger = dw.system.Logger.getLogger('BloomReachWidget', 'BloomReachWidget');
	
	var isValid = validateParametersForBloomReachHTMLFetch(accountID, accountKey, url, userAgent, referrer, pageType);
	if(!isValid) {
		logFailure('getBloomReachWidgetHTML called with invalid parameters, see previous messages');
		return '<!-- Some parameters are missing from Widget call. See your logs for details -->';
	}
	
	var brURL = Site.getCurrent().preferences.custom.BR_Widget_URL
	 + '?url='        + url
	 + '&acct_id='    + accountID
	 + '&acct_auth='  + accountKey
	 + '&ptype='      + pageType
	 + '&user_agent=' + userAgent
	 + '&ref='        + referrer
	 + '&prod_id='    + productID
	 + '&prod_name='  + productName
	 + '&pstatus='    + pageStatus;
	
	return fetchWidgetText(brURL);
	
}


/*
 This funciton is responsible for calling a cached pipeline and returning only the widget html requested in the type parameter. 
 This function is expected to be called from the BloomReachWidget-GetWidget pipeline.
*/
function getBloomReachWidget(type : String, accountID : String, accountKey : String, url : String, userAgent : String, referrer : String, pageType : String, productID : String, productName : String, pageStatus : String) {
	
	// if accountID or accountKey are not given, use system defaults
	if(empty(accountID)){
	  accountID = Site.getCurrent().preferences.custom.BR_ClientID;
	}
	
	if(empty(accountKey)){
	  accountKey = Site.getCurrent().preferences.custom.BR_AuthID;
	}
	
	// verify required arguments
	var isValid : Boolean = validateParametersForWidgetFetch(type, accountID, accountKey, url, userAgent, referrer, pageType);
	if(!isValid) {
		logFailure('getBloomReachWidget called with invalid parameters, see previous messages');
		return '<!-- Some parameters are missing from Widget call. See your logs for details -->';
	}
	
	// convert null arguments to empty strings
	referrer    = (null == referrer)    ? '' : referrer;
	productID   = (null == productID)   ? '' : productID;
	productName = (null == productName) ? '' : productName;
	pageStatus  = (null == pageStatus)  ? '' : pageStatus;
	
	url         = escape(url);
	userAgent   = escape(userAgent);
	referrer    = escape(referrer);
	pageType    = escape(pageType);
	productID   = escape(productID);
	productName = escape(productName);
	pageStatus  = escape(pageStatus);
	
	// build our URL
	var brURL = URLUtils.abs('BloomReachWidget-Fetch', 
							'accountid', accountID, 
							'accountkey', accountKey, 
							'url', url, 
							'useragent', userAgent, 
							'referrer', referrer, 
							'pagetype', pageType, 
							'productid', productID, 
							'productname', productName, 
							'pagestatus', pageStatus);

						
	// make the call
	var text = fetchWidgetText( brURL,Site.getCurrent().preferences.custom.BR_Widget_API_Timeout );
	
	// prase the URL
	var patt  = regExForType( type );
	var result = patt.exec( text );
	
	// Return result
	return (result.length > 1) ? result[1] : "";
}


function validateParametersForWidgetFetch(type : String, accountID : String, accountKey : String, url : String, userAgent : String, referrer : String, pageType : String){
	var logger : Logger = dw.system.Logger.getLogger('BloomReachWidget', 'BloomReachWidget');
	var isWidgetFetchParamsValid : Boolean = true;
	
	if ( empty(type) ) {
		logFailure('type is a required parameter');
		isWidgetFetchParamsValid = false;
	}
	
	var isHTMLFetchParamsValid = validateParametersForBloomReachHTMLFetch(accountID, accountKey, url, userAgent, referrer, pageType);

	return isWidgetFetchParamsValid && isHTMLFetchParamsValid;	
}

function validateParametersForBloomReachHTMLFetch(accountID : String, accountKey : String, url : String, userAgent : String, referrer : String, pageType : String){
	var logger : Logger = dw.system.Logger.getLogger('BloomReachWidget', 'BloomReachWidget');
	var isValid : Boolean = true;
	
	if ( empty(accountID) ) {
		logFailure('accountID is a required parameter');
		isValid = false;
	}
	if ( empty(accountKey) ) {
		logFailure('accountKey is a required parameter');
		isValid = false;
	}
	if ( empty(url) ) {
		logFailure('url is a required parameter');
		isValid = false;
	}
	if ( empty(userAgent) ) {
		logFailure('userAgent is a required parameter');
		isValid = false;
	}
	if ( empty(pageType) ) {
		logFailure('pageType is a required parameter');
		isValid = false;
	}
	
	return isValid;
}

function fetchWidgetText(url : String, timeout:Number) {

	var httpClient : HTTPClient = new HTTPClient();
	var text : String;
	httpClient.open('GET', url);
	if(!empty(timeout))httpClient.setTimeout(timeout);
	httpClient.send();
 
	if (httpClient.statusCode == 200) {
		text = httpClient.text;
	} else {
		text="";
	}	
	
	return text;
}

function regExForType( type : String ) {
	var patt = /a^/; // match nothing
	
	if( type == 'related' ) {
		patt = /<!-- BEGIN RELATED -->([\s\S]+)<!-- END RELATED -->/;
	}
	if( type == 'moreresults' ) {
		patt = /<!-- BEGIN MORE-RESULTS -->([\s\S]+)<!-- END MORE-RESULTS -->/;
	}
	if( type == 'htmlheader' ) {
		patt = /<!-- BEGIN HTML-HEADER -->([\s\S]+)<!-- END HTML-HEADER -->/;
	}
	
	return patt;
}
