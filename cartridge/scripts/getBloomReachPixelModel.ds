/**
* Demandware Script File
* To define input and output parameters, create entries of the form:
*
* @<paramUsageType> <paramName> : <paramDataType> [<paramComment>]
*
* where
*   <paramUsageType> can be either 'input' or 'output'
*   <paramName> can be any valid parameter name
*   <paramDataType> identifies the type of the parameter
*   <paramComment> is an optional comment
*
* For example:
*
*   @input pageType : String 		The type of the page, one of: product, category, other
*	@input category : String 		If per-category analytics reporting is desired, this field may contain a string used to indicate the category of the page within the site e.g. "lamps", etc. If the page already has a breadcrumb then this could be passed in this parameter using vertical pipe | as a separator e.g. "lamps|desk lamps|dataport lamps"
*	@input categoryID : String  	Optionally, category ID can be passed in, and the category field generated by traversing to parent.  If both category and categoryID are specified, this field will cause the overwriting of the category input
*	@input productID : String 		For product pages, a unique identifier for the product
*	@input productName : String 	The name of the product
* 	@input isConversion : String 	If the current page is a conversion page, pass 1.  If any other value is passed the value is set to 0
*	@input basketValue : String 	For conversion pages, the total price of the checkout basket, in dollars, without any symbols (e.g. "237.00")
*	@input orderID : String 		Required for conversion pages, the order id associated with the order  placed (e.g. "12123455")
*   @output pixelModel : Object
*
*/
importPackage( dw.system );
importPackage( dw.catalog );

function execute( args : PipelineDictionary ) : Number
{

	args.pixelModel = {
				"accountID": dw.system.Site.getCurrent().getPreferences().getCustom().BR_ClientID, 
				"pageType" : args.pageType, 
				"category" : args.category,
				"productID" : args.productID,
				"productName" : args.productName, 
				"isConversion" : "0", 
				"basketValue" : args.basketValue,
				"orderID" : args.orderID
			};

	if(args.isConversion == "1" ){args.pixelModel.isConversion = "1";}
	
	/*Create the category by traversing to root element by parent categories*/
	if(args.categoryID != "")
	{
		var cat: Category = CatalogMgr.getCategory(args.categoryID);

		if(cat != null)
		{
			var categoryString: String = cat.displayName;
				while( cat.parent != null && !cat.parent.isRoot() )
				{
					if( cat.online )
					{
						categoryString = cat.parent.displayName + "|" + categoryString; 
					}
					cat = cat.parent;
				}
				args.pixelModel.category = categoryString;
		}
	} 
   return PIPELET_NEXT;
}
